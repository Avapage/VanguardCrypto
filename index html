<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Vanguard Cryptocurrency</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- React & ReactDOM CDN -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
  <body class="bg-gray-900 text-white min-h-screen flex justify-center items-start pt-10">
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useEffect } = React;

      function RSIHeatmap() {
        const [data, setData] = useState([]);
        const [timeframe, setTimeframe] = useState('hour');

        useEffect(() => {
          fetchRSIData();
        }, [timeframe]);

        const fetchRSIData = async () => {
          try {
            const res = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false');
            const coins = await res.json();
            const prices = coins.map(coin => ({
              symbol: coin.symbol.toUpperCase(),
              id: coin.id,
            }));

            const rsiData = await Promise.all(prices.map(async coin => {
              const marketChart = await fetch(`https://api.coingecko.com/api/v3/coins/${coin.id}/market_chart?vs_currency=usd&days=1&interval=${timeframe === 'hour' ? 'hourly' : 'daily'}`);
              const chart = await marketChart.json();
              const closes = chart.prices.map(p => p[1]);

              if (closes.length < 15) return null;

              const rsi = calculateRSI(closes);
              return { symbol: coin.symbol, rsi };
            }));

            setData(rsiData.filter(Boolean));
          } catch (err) {
            console.error(err);
          }
        };

        const calculateRSI = (closes) => {
          const gains = [];
          const losses = [];

          for (let i = 1; i < 15; i++) {
            const diff = closes[i] - closes[i - 1];
            if (diff >= 0) gains.push(diff);
            else losses.push(Math.abs(diff));
          }

          const avgGain = gains.reduce((a, b) => a + b, 0) / 14 || 0.0001;
          const avgLoss = losses.reduce((a, b) => a + b, 0) / 14 || 0.0001;

          const rs = avgGain / avgLoss;
          return Math.min(100, Math.max(0, 100 - 100 / (1 + rs)));
        };

        const getColor = (rsi) => {
          if (rsi >= 70) return 'bg-red-500';
          if (rsi >= 50) return 'bg-yellow-500';
          if (rsi >= 30) return 'bg-green-500';
          return 'bg-blue-500';
        };

        return (
          <div className="w-full max-w-5xl px-4">
            <h1 className="text-2xl font-bold text-center mb-6">Vanguard Cryptocurrency - RSI Heatmap</h1>
            <div className="flex justify-center mb-4 gap-2">
              <button
                className={`px-4 py-1 rounded ${timeframe === 'hour' ? 'bg-white text-black' : 'bg-gray-700 text-white'}`}
                onClick={() => setTimeframe('hour')}
              >
                Hourly
              </button>
              <button
                className={`px-4 py-1 rounded ${timeframe === 'day' ? 'bg-white text-black' : 'bg-gray-700 text-white'}`}
                onClick={() => setTimeframe('day')}
              >
                Daily
              </button>
            </div>
            <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-10 gap-2">
              {data.map((coin, idx) => (
                <div key={idx} className={`p-2 text-center text-sm rounded ${getColor(coin.rsi)}`}>
                  {coin.symbol}<br />
                  <span className="text-xs">{coin.rsi.toFixed(0)}</span>
                </div>
              ))}
            </div>
          </div>
        );
      }

      ReactDOM.createRoot(document.getElementById('root')).render(<RSIHeatmap />);
    </script>
  </body>
</html>
